#!/bin/bash
#
# SUBMIT launch script.
#

# Determining system batch

TEST_SLUR=`echo $(which sbatch)`     # Slurm System
TEST_PBSS=`echo $(which qsub)`       # Torque/PBS (Portable Batch System)
TEST_LSFS=`echo $(which bsub)`       # LSF (Load Sharing Facility)
TEST_HTCO=`echo $(which bsubmit)`    # HTCondor System
TEST_LLSB=`echo $(which llsubmit)`   # IBM Batch System
TEST_SGES=`echo $(which sge_submit)` # Grid Engine (SGE)

if [[ `echo $TEST_SLUR`   != "" ]]; then # Slurm System
   MACHINE="SLM" && BATDESC="Slurm System [sbatch]"
elif [[ `echo $TEST_PBSS` != "" ]]; then # Torque/PBS (Portable Batch System)
   MACHINE="PBS" && BATDESC="Torque/PBS (Portable Batch System) [qbub]"
elif [[ `echo $TEST_LSFS` != "" ]]; then # LSF (Load Sharing Facility)
   MACHINE="LSF" && BATDESC="LSF (Load Sharing Facility) [bsub]"
elif [[ `echo $TEST_HTCO` != "" ]]; then # HTCondor System
   MACHINE="HTC" && BATDESC="HTCondor System [bsubmit]"
elif [[ `echo $TEST_LLSB` != "" ]]; then # IBM Batch System
   MACHINE="IBM" && BATDESC="IBM Batch System [llsubmit]"
elif [[ `echo $TEST_SGES` != "" ]]; then # SGE (Sun Grid Engine)
   MACHINE="SGE" && BATDESC="SGE (Sun Grid Engine) [sge_submit]"
else                                     # Local Machine
   MACHINE="LOC" && BATDESC="Local Machine"
fi

# Showing the program help

if [[ `echo $1 | grep -ia "\-ver"` != "" ]]; then

   clear
   echo
   echo -e "\033[1;32m SUBMIT Execution Script         [V2023.08] \033[0m"

   infov
   exit

elif [[ -z $1 ]]; then

   FILES=`ls *.com *.gjf *.inp *.xyz *.gro`

   clear
   echo
   echo -e "\033[1;34m --------------------------------------------------- \033[0m"
   echo -e "\033[1;31m submit \033[1;32m<program> <input.ext> <-options> <-ntasks I> \033[0m"
   echo
   echo -e "\033[1;33m PARAMETERS                                          \033[0m"
   echo -e "\033[1;21m      program    [gsn/orca/xtb/gmx program]          \033[0m"
   echo -e "\033[1;21m      input.ext  [Input GJF/COM/INP/XYZ/GRO file]    \033[0m"
   echo
   echo -e "\033[1;33m OPTIONS/DEFAULTS                                    \033[0m"
   echo -e "\033[1;21m     -options    [Program specific options]          \033[0m"
   echo -e "\033[1;21m     -queue  T   [Name of available queue]           \033[0m"
   echo -e "\033[1;21m     -ntasks I   [Number of processors][-prc]        \033[0m"
   echo -e "\033[1;21m     -preserv    [Preserv the submission job file]   \033[0m"
   echo -e "\033[1;21m     -debug      [Check generated job before submit] \033[0m"
  #echo
  #echo -e "\033[1;33m ADDITIONAL                                          \033[0m"
  #echo -e "\033[1;21m     -batch  T   [Name of system batch]              \033[0m"
   echo
   echo -e "\033[1;33m AVAILABLE SYSTEM BATCH                              \033[0m"
   if [[ $MACHINE == "PBS" ]]; then
      echo "     »Torque/PBS (Portable Batch System) [qbub]"
   elif [[ $MACHINE == "LSF" ]]; then
      echo "     »LSF (Load Sharing Facility) [bsub]"
   elif [[ $MACHINE == "SLM" ]]; then
      echo "     »Slurm System [sbatch]"
   elif [[ $MACHINE == "HTC" ]]; then
      echo "     »HTCondor System [bsubmit]"
   elif [[ $MACHINE == "IBM" ]]; then
      echo "     »IBM Batch System [llsubmit]"
   elif [[ $MACHINE == "SGE" ]]; then
      echo "     »Grid Engine (SGE) [sge_submit]"
   elif [[ $MACHINE == "LOC" ]]; then
      echo "     »Local Machine"
   else
      echo "     »NOT DEFINED"
   fi
   echo
   echo -e "\033[1;33m WARNING                                             \033[0m"
   echo -e "\033[1;21m      This is an open-source script that may require \033[0m"
   echo -e "\033[1;21m      adjustments depending on the available queue   \033[0m"
   echo -e "\033[1;21m      system                                         \033[0m"
   echo -e "\033[1;34m --------------------------------------------------- \033[0m"
   echo

   infos -compact

   if [[ $FILES != "" ]]; then
      echo
      echo " Input(s):"
      echo
      echo " » "$FILES
      echo
   else
      echo
   fi

   exit

else

   clear

fi

# Determining system configuration

NUMMACS=1 # <<< For a job running on a cluster, modify this !!

if [[ `lscpu      | grep -ia "Thread(s) per núcleo:"  | grep -ia -v list | grep -ia -v numa | head -n1 | awk '{print $4}'` != "" ]]; then
   MAXCPUS=`lscpu | grep -ia "CPU(s):"                | grep -ia -v list | grep -ia -v numa | head -n1 | awk '{print $2}'`
   MAXPROC=$((NUMMACS*MAXCPUS))
else
   MAXCPUS=`lscpu | grep -ia "CPU(s):"                | grep -ia -v list | grep -ia -v numa | head -n1 | awk '{print $2}'`
   MAXPROC=$((NUMMACS*MAXCPUS))
fi

# Verify if program and input files exist

if [[ `echo $(which $1)` = "" && `echo $1 | grep -ia ".sh"` = "" ]]; then
   echo
   echo " ---------------------------------------"
   echo " Input:  "$1
   echo " Submit: The program file was not found!"
   echo " ---------------------------------------"
   echo
   exit
elif [[ ! -f $2 && `echo $1 | grep -ia ".sh"` = "" ]]; then
   echo
   echo " -------------------------------------"
   echo " Input:  "$2
   echo " Submit: The input file was not found!"
   echo " -------------------------------------"
   echo
   exit
fi

# Setting environment variables

JOBNAME=`echo $2 | awk -F"." '{print $1}'` # `echo $2 | sed -E 's/\.(gjf|com|inp|xyz|gro|pdb|...|log)//'`
PROGEXE=$1
INPNAME=$2
WORKPAR=$@
PRGSJOB=$JOBNAME".jobout" # PRGSJOB=$JOBNAME".job"$PROGEXE
WORKCFG=`echo $WORKPAR | sed "s/$PROGEXE//g" | sed "s/$INPNAME//g"` # | sed s/\-preserv/\/`

# Setting execution parameters

TPQUEUE="" # Default values
CNTASKS="2"
CFGSAVE="NO"
CFGDEBG="NO"
while [ "$1" != "" ]; do
   case $1 in
      -job|-JOB|-queue|-QUEUE)
         if [ -n "$2" ]; then
            TPQUEUE="$2"
            shift 2
            continue
         else
            echo ' ERROR: the option "-queue" requires a non-empty argument.'
            exit
         fi;;
      -prc|-PRC|-proc|-PROC|-procs|-PROCS|-nproc|-NPROC|-nprocs|-NPROCS|-nPROC|-nPROCS|-ntasks|-NTASKS|-paral|-PARAL|-parallel|-PARALLEL)
         if [ -n "$2" ]; then
            CNTASKS="$2"
            shift 2
            continue
         else
            echo ' ERROR: the option "-ntasks" requires a non-empty argument.'
            exit
         fi;;
      -prs|-PRS|-pres|-PRES|-preserv|-PRESERV)
         CFGSAVE="YES";;
      -deb|-DEB|-dbg|-DBG|-debug|-DEBUG|-chk|-CHK|-check|-CHECK)
         CFGDEBG="YES";;
   esac
   shift
done
if [[ $CNTASKS != "" && $(echo "$CNTASKS > $MAXPROC" | bc) -eq 1 ]]; then
   CNTASKS=$MAXPROC
fi

# Showing execution information

if [[ $MACHINE != "LOC" ]]; then

   echo
   echo " Creating and executing the job..."
   echo " ========================================================="
   echo " Sys. Batch:" $BATDESC
   echo " ---------------------------------------------------------"
   echo "   Job Name:" $JOBNAME
   echo "    Program:" $PROGEXE
   echo "      Input:" $INPNAME
   echo "    Options:" $WORKCFG
   echo "     Procs.:" $CNTASKS "(Max.:" $MAXPROC")"
   echo " ========================================================="
   echo

fi

# Defining functions...

EXEC_SLM() # Slurm System
{
   echo '#!/bin/bash                                          '  > $JOBNAME.job
   echo '                                                     ' >> $JOBNAME.job
   echo '#SBATCH --job-name='$JOBNAME'                        ' >> $JOBNAME.job
  #echo '#SBATCH --ntasks='$CNTASKS'                          ' >> $JOBNAME.job
   echo '#SBATCH --ntasks-per-node='$CNTASKS'                 ' >> $JOBNAME.job
   echo '#SBATCH --time=300:00:00                             ' >> $JOBNAME.job
   echo '                                                     ' >> $JOBNAME.job
   echo 'echo "## Job started at"' $(date +'%d-%m-%Y as %T') '' >> $JOBNAME.job
   echo 'echo "## Job execution node:  $(hostname -s)"        ' >> $JOBNAME.job
   echo 'echo "## Job number of tasks: $SLURM_NTASKS"         ' >> $JOBNAME.job
   echo 'echo "## Submission folder:   $SLURM_SUBMIT_DIR"     ' >> $JOBNAME.job
   echo '                                                     ' >> $JOBNAME.job
  #echo "time $PROGEXE $INPNAME $WORKCFG -local               " >> $JOBNAME.job
   echo "time $PROGEXE $INPNAME $WORKCFG -local > $PRGSJOB    " >> $JOBNAME.job

   if [[ $CFGDEBG != "YES" ]]; then
      sbatch $JOBNAME.job; echo ; if [ $CFGSAVE = "NO" ]; then rm -f $JOBNAME.job ; fi
   else
      echo ' » DEBUG: Verify generated job file!' ; echo ; exit
   fi
}

EXEC_PBS() # Torque/PBS (Portable Batch System)
{
 # - SPECIFIC --------------------------------------------------------------------------------------
   if [[ $TPQUEUE   == "serial" ]]; then
      DIRECTIVE="NO"
   elif [[ $TPQUEUE == "umagpu" ]]; then
      DIRECTIVE="NO"
   elif [[ $TPQUEUE == "duasgpus" ]]; then
      DIRECTIVE="NO"
   elif [[ $TPQUEUE == "testegpu" ]]; then
      DIRECTIVE="NO"
 # - SPECIFIX --------------------------------------------------------------------------------------
   elif [[ $TPQUEUE == "testes" ]]; then
      DIRECTIVE="YES" ; CNODES=1 ; NTASKS=2   ; CNTASKS=$NTASKS ; WORKCFG=' -prc '$NTASKS' '$WORKCFG
   elif [[ $TPQUEUE == "par16" ]]; then
      DIRECTIVE="YES" ; CNODES=1 ; NTASKS=16  ; CNTASKS=$NTASKS ; WORKCFG=' -prc '$NTASKS' '$WORKCFG
   elif [[ $TPQUEUE == "par128" ]]; then
      DIRECTIVE="YES" ; CNODES=1 ; NTASKS=128 ; CNTASKS=$NTASKS ; WORKCFG=' -prc '$NTASKS' '$WORKCFG
   elif [[ $TPQUEUE == "expressa" ]]; then
      DIRECTIVE="YES" ; CNODES=2 ; NTASKS=128 ; CNTASKS=$NTASKS ; WORKCFG=' -prc '$NTASKS' '$WORKCFG
   elif [[ $TPQUEUE == "memshort" ]]; then
      DIRECTIVE="YES" ; CNODES=2 ; NTASKS=128 ; CNTASKS=$NTASKS ; WORKCFG=' -prc '$NTASKS' '$WORKCFG
   elif [[ $TPQUEUE == "memlong" ]]; then
      DIRECTIVE="YES" ; CNODES=2 ; NTASKS=128 ; CNTASKS=$NTASKS ; WORKCFG=' -prc '$NTASKS' '$WORKCFG
   elif [[ $TPQUEUE == "paralela" ]]; then
      DIRECTIVE="YES" ; CNODES=2 ; NTASKS=128 ; CNTASKS=$NTASKS ; WORKCFG=' -prc '$NTASKS' '$WORKCFG
 # - DEFAULTS --------------------------------------------------------------------------------------
   elif [[ `qstat -q | grep "par16"` != "" ]]; then    # Default queue for LOVELACE
      DIRECTIVE="YES" ; CNODES=1 ; NTASKS=16  ; CNTASKS=$NTASKS ; WORKCFG=' -prc '$NTASKS' '$WORKCFG ; TPQUEUE="par16"
   elif [[ `qstat -q | grep "parice"` != "" ]]; then   # Default queue for ICE
      DIRECTIVE="YES" ; CNODES=1 ; NTASKS=12  ; CNTASKS=$NTASKS ; WORKCFG=' -prc '$NTASKS' '$WORKCFG ; TPQUEUE="parice"
 # - ERROR -----------------------------------------------------------------------------------------
   else
      echo ; echo "ERROR: Queue not definied" ; echo ; exit
   fi

   echo "#!/usr/bin/bash                                      "  > $JOBNAME.job
   echo "#PBS -N $JOBNAME                                     " >> $JOBNAME.job
   echo "#PBS -q $TPQUEUE                                     " >> $JOBNAME.job
   if [[ $DIRECTIVE == "YES" ]]; then
   echo "#PBS -l nodes=$CNODES:ppn=$NTASKS                    " >> $JOBNAME.job
   fi
   echo "#PBS -o $JOBNAME.jobexe                              " >> $JOBNAME.job
   echo "#PBS -e $JOBNAME.joblog                              " >> $JOBNAME.job
   echo "#PBS -m ae                                           " >> $JOBNAME.job
   echo "#PBS -V                                              " >> $JOBNAME.job
   echo '                                                     ' >> $JOBNAME.job
   echo 'echo "## Job started at"' $(date +'%d-%m-%Y as %T') '' >> $JOBNAME.job
   echo 'echo "## Job execution node:  $(hostname -s)"        ' >> $JOBNAME.job
   echo 'echo "## Job number of tasks: $PBS_NUM_PPN"          ' >> $JOBNAME.job
   echo 'echo "## Submission folder:   $PBS_O_WORKDIR"        ' >> $JOBNAME.job
   echo '                                                     ' >> $JOBNAME.job
  #echo "export OMP_NUM_PROCS=$NTASKS                         " >> $JOBNAME.job
   echo 'qstat -u $USER | grep -v ada: | sed '/^$/d'          ' >> $JOBNAME.job
   echo 'cd $PBS_O_WORKDIR                                    ' >> $JOBNAME.job
  #echo "time $PROGEXE $INPNAME $WORKCFG -local               " >> $JOBNAME.job
   echo "time $PROGEXE $INPNAME $WORKCFG -local > $PRGSJOB    " >> $JOBNAME.job

   if [[ $CFGDEBG != "YES" ]]; then
      qsub $JOBNAME.job; echo ; if [ $CFGSAVE = "NO" ]; then rm -f $JOBNAME.job ; fi
   else
      echo ' » DEBUG: Verify generated job file!' ; echo ; exit
   fi
}

EXEC_LOC() # Local Machine
{
   $PROGEXE $INPNAME $WORKCFG -local &
}

# Creating and executing the job

if [[ $MACHINE = "SLM" ]]; then   # Slurm System
   EXEC_SLM
elif [[ $MACHINE = "PBS" ]]; then # Torque/PBS (Portable Batch System)
   EXEC_PBS
else # Local machine
   EXEC_LOC
fi
